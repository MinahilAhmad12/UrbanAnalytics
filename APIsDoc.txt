

API Documentation for Urban Analytics Project

 Authentication APIs
1.  Signup
POST api/signup/

Registers a new user and sends an OTP to verify their email.

Request Body (JSON):

{
  "username": "john_doe",
  "email": "john@example.com",
  "password": "securepassword123"
}
Response:

{
  "message": "User created successfully. Verification email sent!"
}

2.  Verify Signup OTP
POST api/verify-signup-otp/

Verifies the OTP sent during signup.

Request Body:
{
  "email": "john@example.com",
  "otp": "123456"
}
Response:
{
  "message": "Signup OTP verified successfully!"
}

3.  Resend Signup OTP
POST api/resend-signup-verification-email/

Sends a new OTP if the previous one was lost or expired.

Request Body:
{
  "email": "john@example.com"
}
Response:

{
  "message": "Verification email resent successfully."
}

4 Sign In / Obtain Token Pair
POST /signin/

Authenticate the user and return a pair of access and refresh tokens.

Request Body:

{
  "username": "testuser",
  "password": "testpassword123"
}
 If using email for login:

{
  "email": "test@example.com",
  "password": "testpassword123"
}
Response:

{
  "refresh": "eyJ0eXAiOiJKV1QiLCJh...<refresh_token>",
  "access": "eyJ0eXAiOiJKV1QiLCJh...<access_token>",
  "user": {
    "id": 1,
    "username": "testuser",
    "email": "test@example.com",
    "is_verified": true
  }
}
 The access token is used for authenticating API calls.
 The refresh token is used to get a new access token when the old one expires.

5.  Refresh Access Token
POST /api/token/refresh/

Refresh your access token using a valid refresh token.

Request Body:

{
  "refresh": "eyJ0eXAiOiJKV1QiLCJh...<refresh_token>"
}
Response:

{
  "access": "eyJ0eXAiOiJKV1QiLCJh...<new_access_token>"
}


6. Forgot Password
POST api/forgot-password/

Sends an OTP to reset the password.

Request Body:

{
  "email": "john@example.com"
}
Response:

{
  "message": "Password reset OTP sent successfully."
}
7.  Resend Forgot Password OTP
POST api/resend-forgot-password-email/

Sends the OTP again for password reset.

Request Body:

{
  "email": "john@example.com"
}
8.  Verify Forgot Password OTP
POST api/verify-forgot-password-otp/

Verifies OTP before allowing password reset.

Request Body:

{
  "email": "john@example.com",
  "otp": "123456"
}
Response:

{
  "message": "Forgot password OTP verified successfully!"
}
9.  Reset Password
POST api/reset-password/

Sets a new password after OTP verification.

Request Body:

{
  "email": "john@example.com",
  "new_password": "newsecurepassword"
}
Response:

{
  "message": "Password reset successfully."
}
 Project Management APIs
 All endpoints below require a valid JWT Access Token in the headers:

Authorization: Bearer <access_token>

10.  Create Project
POST api/projects/

Creates a new project.

Request Body:
{
  "name": "My New Project"
}
Response:

{
  "id": 1,
  "name": "My New Project",
  ...
}
11.  Get User Projects
GET api/my-projects/

Returns all projects belonging to the authenticated user.

Response:

[
  {
    "id": 1,
    "name": "My Project",
    "areas": [...]
  },
  ...
]
12.  View Specific Project Area
GET api/projects/{project_id}/areas/{area_id}/view/

Fetch details of a specific project area and its saved map state.

Response:

{
  "area": {...},
  "map_state": {...}
}


 Reports API
 Authorization: Bearer <access_token>

13. Delete an area of a project
  DELETE /api/project-area/{area_id}/delete/

  Request: /api/project-area/123/delete/
  
  Response
Success (204 No Content)
The project area was deleted successfully.

14.  Generate Report
POST /projects/{project_id}/areas/{area_id}/reports/

Generates a PDF report based on analysis.

Request Body:

{
  "report_type": "environmental_summary"
}
Response: (PDF File Download)
Headers:

Content-Disposition: attachment; filename="report.pdf"
Content-Type: application/pdf


15. List All Saved Reports
GET api/projects/<int:project_id>/reports/

Fetch a list of all saved reports for the authenticated user.

Response:

[
  {
    "id": 10,
    "project": 1,
    "area": 5,
    "report_name": "Environmental Summary",
    "created_at": "2025-05-15T10:00:00Z",
    "file_url": "http://<your-domain>/media/reports/report_10.pdf"
  },
  {
    "id": 11,
    "project": 2,
    "area": 3,
    "report_name": "Thermal Analysis Report",
    "created_at": "2025-05-14T09:30:00Z",
    "file_url": "http://<your-domain>/media/reports/report_11.pdf"
  }
]


16. To get UCs of a particular city
GET api/ucs/<str:city_name>/

Response:
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "geometry": {
        "type": "MultiPolygon",
        "coordinates": [[[...]]]  // coordinates of UC
      },
      "properties": {
        "uc_name": "UC 1",
        "city_name": "Lahore"
      }
    },
    ...
  ]
}

17. For analysis of an area

POST /api/analyze/
    Request JSON:
    {
        "city_name": "Lahore",
        "analysis_type": "ndvi" | "thermal" | "aqi",
        "start_date": "2023-01-01",
        "end_date": "2023-12-31"
    }

    Response JSON:
    {
        "map_layer": {
            "urlFormat": ".../map/{z}/{x}/{y}?token=...",
            "mapid": "...",
            "token": "..."
        },
        "stats": {
            "mean": ...,
            "min": ...,
            "max": ...,
            "std_dev": ...
        }
    }
 Notes for Frontend Developer
All requests must be in JSON format.

For protected routes, include the Authorization header.

Handle errors by checking for keys like "error" in the response.

OTPs are 6-digit numeric codes.

After signup or password reset request, frontend must guide the user to OTP verification.

Let me know if you'd like this in Markdown, PDF, Swagger/OpenAPI format, or embedded directly into your frontend docs.









